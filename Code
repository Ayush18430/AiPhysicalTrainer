#!/usr/bin/env python
# coding: utf-8

# In[2]:


import cv2
import mediapipe as mp
import numpy as np
mp_drawing = mp.solutions.drawing_utils ##drawing utilities
mp_pose = mp.solutions.pose ##pose estimation model


# In[3]:


#to get coordinates for angle
def part(i):
    coordinate = [landmarks[i].x,landmarks[i].y] 
    return coordinate


# In[4]:


#for angle calculation
def calculate_angle(a,b,c):
#here a, b & c are our first, mid and end point
    a = np.array(a) # First
    b = np.array(b) # Mid
    c = np.array(c) # End
    
    radians = np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0])
    angle = np.abs(radians*180.0/np.pi)
    
    if angle >180.0:
        angle = 360-angle
        
    return angle 


# In[5]:


# to get angle of joint i
def final_angle(i):
    a = part(i - 2)
    b = part(i)
    c = part(i+2)
    return calculate_angle(a, b, c)


# In[10]:


cap = cv2.VideoCapture(0) ## Cap is my variable to store the input video
#to setup mediapipe
with mp_pose.Pose(min_detection_confidence = 0.5, min_tracking_confidence = 0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        #Recolour image BGR2RGB
        image = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        
        #make detection
        results = pose.process(image)
        
        #Recolour image back to RGB2BGR
        image.flags.writeable = True
        image=cv2.cvtColor(image, cv2.COLOR_RGB2BGR);
        
        
        
        # Extract Landmark
        try:
            landmarks = results.pose_landmarks.landmark
            angle = int(final_angle(25))
            #Visualization of code
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(part(25), [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                ) 
        except:
            pass
        
        try:
            landmarks = results.pose_landmarks.landmark
            angle = int(final_angle(26))
            #Visualization of code
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(part(26), [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                ) 
        except:
            pass
        try:
            landmarks = results.pose_landmarks.landmark
            angle = int(final_angle(13))
            #Visualization of code
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(part(13), [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                ) 
        except:
            pass
        try:
            landmarks = results.pose_landmarks.landmark
            angle = int(final_angle(14))
            #Visualization of code
            cv2.putText(image, str(angle), 
                           tuple(np.multiply(part(14), [640, 480]).astype(int)), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA
                                ) 
        except:
            pass
        
        
        #TO render
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,mp_drawing.DrawingSpec(color=(245,117,66),thickness = 2, circle_radius = 2),
                                  mp_drawing.DrawingSpec(color = (245,66,230),thickness = 2, circle_radius = 2))
        #using drawing utilities
        #here the colour of thr the rendered section was changed using last two attributes in mp_drawing.DrawingSpec...
        
        
        
        #to show video output
        cv2.imshow('Video Feed from webcam', image)
    #to break the loop // press 'a' to terminate
        if cv2.waitKey(10) & 0xFF == ord('a'):
            break

    cap.release() #release web camp
    cv2.destroyAllWindows()
